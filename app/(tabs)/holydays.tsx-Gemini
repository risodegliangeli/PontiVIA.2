import useLocalizationData, { getLocalHolydas } from '@/app/data/data';
import DropdownCountry from '@/components/ui/DropdownCountry'; // COUNTRY PICKER 
import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
import { useHolydays } from '@/context/HolydaysContext'; // CONTEXT
import React, { useEffect, useState, Suspense, ReactNode } from 'react';
import DateTimePicker, { DateType, useDefaultStyles, } from 'react-native-ui-datepicker';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {
  Alert,
  ImageBackground,
  Modal,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  useColorScheme,
  Image
} from 'react-native';

const useThemeColors = () => {
  const colorScheme = useColorScheme();
  return Colors[colorScheme ?? 'light'];
};

const { months } = useLocalizationData();

const holydaysLabels = [
  'Le mie date',                                // 0
  'Aggiungi i tuoi giorni speciali',            // 1
  'Le festività nazionali',                     // 2
  'I periodi lunghi',                           // 3
  'I tuoi giorni speciali',                     // 4
  'Un giorno',                                  // 5
  'Un periodo di più giorni',                   // 6
  'Attenzione',                                 // 7
  'Vuoi eliminare il giorno',                   // 8
  'Annulla',                                    // 9
  'Elimina',                                    // 10
  'Salva',                                      // 11
  'Data inizio',                                // 12
  'Data fine',                                  // 13
  'Descrizione',                                // 14
  'Elimina periodo',                             // 15
];


const saveData = async (data: any, key: string) => {
  try {
    const jsonValue = JSON.stringify(data);
    await AsyncStorage.setItem(key, jsonValue);
  } catch (e) {
    console.error(`Failed to save data with key ${key}:`, e);
  }
};

const loadData = async (key: string) => {
  try {
    const jsonValue = await AsyncStorage.getItem(key);
    return jsonValue != null ? JSON.parse(jsonValue) : null;
  } catch (e) {
    console.error(`Failed to load data with key ${key}:`, e);
    return null;
  }
};

/* ============================================================================= 

                          MAIN EXPORT - Holydays

============================================================================= */
export default function Holydays() {
  const colors = useThemeColors();
  const { 
    myCountry, setMyCountry,
    personalHolydays, setPersonalHolydays,
    vacationPeriods, setVacationPeriods,
    addSingleDate, addPeriod,
    deleteSingleDate, deletePeriod
  } = useHolydays();
  
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedRadioOption, setSelectedRadioOption] = useState('single');
  const [selectedSingleDate, setSelectedSingleDate] = useState<DateType>(new Date());
  const [selectedPeriodStart, setSelectedPeriodStart] = useState<DateType>(new Date());
  const [selectedPeriodEnd, setSelectedPeriodEnd] = useState<DateType>(new Date());
  const [singleDateDescription, setSingleDateDescription] = useState<string>('');
  const [periodDescription, setPeriodDescription] = useState<string>('');
  
  useEffect(() => {
    const initializeData = async () => {
      const storedPersonalHolydays = await loadData('personalHolydays');
      if (storedPersonalHolydays) {
        setPersonalHolydays(storedPersonalHolydays);
      }
      const storedVacationPeriods = await loadData('vacationPeriods');
      if (storedVacationPeriods) {
        setVacationPeriods(storedVacationPeriods);
      }
      const storedMyCountry = await loadData('myCountry');
      if (storedMyCountry) {
        setMyCountry(storedMyCountry);
      }
    };
    initializeData();
  }, []);


  /* ============================================================================= 
    AGGIUNGI GIORNO SINGOLO 
  ============================================================================= */
  const handleAddSingleDate = async () => {
    if (!singleDateDescription) {
      // Alert.alert(holydaysLabels[7], holydaysLabels[14]);
      setModalVisible(false);
      return;
    }
    const newDate = {
      date: selectedSingleDate,
      description: singleDateDescription
    };
    const newHolydays = [...personalHolydays, newDate];
    setPersonalHolydays(newHolydays);
    await saveData(newHolydays, 'personalHolydays');
    setModalVisible(false);
    resetSingleDateForm();
  };
  
  const handleAddPeriod = async () => {
    if (!periodDescription) {
      // Alert.alert(holydaysLabels[7], holydaysLabels[14]);
      setModalVisible(false);
      return;
    }
    const newPeriod = {
      startDate: selectedPeriodStart,
      endDate: selectedPeriodEnd,
      description: periodDescription,
    };
    const newVacationPeriods = [...vacationPeriods, newPeriod];
    setVacationPeriods(newVacationPeriods);
    await saveData(newVacationPeriods, 'vacationPeriods');
    setModalVisible(false);
    resetPeriodForm();
  };
  
  const handleDeleteSingleDate = async (indexToDelete: number) => {
    Alert.alert(
      holydaysLabels[7],
      `${holydaysLabels[8]} ${personalHolydays[indexToDelete].description}?`,
      [
        { text: holydaysLabels[9], style: 'cancel' },
        {
          text: holydaysLabels[10],
          onPress: async () => {
            const newHolydays = personalHolydays.filter((_, index) => index !== indexToDelete);
            setPersonalHolydays(newHolydays);
            await saveData(newHolydays, 'personalHolydays');
          },
        },
      ],
      { cancelable: false }
    );
  };

  const handleDeletePeriod = async (indexToDelete: number) => {
    Alert.alert(
      holydaysLabels[7],
      `${holydaysLabels[15]} ${vacationPeriods[indexToDelete].description}?`,
      [
        { text: holydaysLabels[9], style: 'cancel' },
        {
          text: holydaysLabels[10],
          onPress: async () => {
            const newVacationPeriods = vacationPeriods.filter((_, index) => index !== indexToDelete);
            setVacationPeriods(newVacationPeriods);
            await saveData(newVacationPeriods, 'vacationPeriods');
          },
        },
      ],
      { cancelable: false }
    );
  };
  
  const resetSingleDateForm = () => {
    setSingleDateDescription('');
    setSelectedSingleDate(new Date());
    setModalVisible(false);
  };

  const resetPeriodForm = () => {
    setPeriodDescription('');
    setSelectedPeriodStart(new Date());
    setSelectedPeriodEnd(new Date());
    setModalVisible(false);
  };
  
  const styles = StyleSheet.create({
    scrollview: {
      flex:0, 
      backgroundColor: 'transparent',
      paddingHorizontal:12, 
      paddingTop: 80,
    },
    image: {
      flex: 1,
      justifyContent: 'center',
    },
    sectionTitle: {
      fontSize: 24,
      fontWeight: '600',
      textAlign: 'center',
      color: colors.text,
    },
    // CARD
    groupContainer: {
      backgroundColor: colors.cardBackground,
      borderRadius: 24,
      paddingVertical: 24,
      paddingHorizontal:18,
      marginBottom: 20,
      width: '100%',
    },
    listTitle: {
      color: colors.text,
      fontSize: 14,
      fontWeight: '600',
      marginTop: 0,
      marginBottom: 0,
      paddingBottom: 12,
    },
    editButton: {
      flexDirection: 'row',
      alignItems: 'center',
      marginTop: 12,
    },
    editText: {
      marginLeft: 8,
      color: colors.text,
      fontSize: 14,
      fontWeight: 400,
    },
    listItem: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingVertical: 8,
    },
    listItemText: {
      color: colors.text,
      fontSize: 16,
      fontWeight: '400',
    },
    deleteButton: {
      padding: 5,
    },
    modalContainer: {
      flex: 1,
      justifyContent: 'flex-end',
      alignItems: 'center',
      backgroundColor: 'rgba(0,0,0,0.5)',
    },
    modalContent: {
      backgroundColor: colors.modalBackground,
      borderTopLeftRadius: 20,
      borderTopRightRadius: 20,
      padding: 20,
      width: '100%',
      alignItems: 'center',
    },
    closeButton: {
      alignSelf: 'flex-end',
    },
    modalTitle: {
      fontSize: 20,
      fontWeight: 'bold',
      marginBottom: 10,
      color: colors.text,
    },
    radioButtons: {
      flexDirection: 'row',
      justifyContent: 'space-around',
      width: '100%',
      marginVertical: 10,
    },
    radioButton: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    radioText: {
      marginLeft: 8,
      color: colors.text,
      fontSize: 16,
    },
    radioCircle: {
      height: 20,
      width: 20,
      borderRadius: 10,
      borderWidth: 1,
      borderColor: colors.text,
      alignItems: 'center',
      justifyContent: 'center',
    },
    selectedRadioCircle: {
      width: 12,
      height: 12,
      borderRadius: 6,
      backgroundColor: colors.text,
    },
    modalInput: {
      width: '100%',
      height: 40,
      backgroundColor: colors.inputBackground,
      borderRadius: 10,
      paddingHorizontal: 10,
      color: colors.text,
    },
    modalButtons: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      width: '100%',
      marginTop: 20,
    },
    cancelButton: {
      backgroundColor: colors.disabled,
      padding: 10,
      borderRadius: 20,
      width: '48%',
      alignItems: 'center',
    },
    addButton: {
      backgroundColor: colors.addButtonBackground,
      padding: 10,
      borderRadius: 20,
      width: '48%',
      alignItems: 'center',
    },
    cancelButtonText: {
      color: colors.black,
      fontWeight: 'bold',
    },
    addButtonText: {
      color: colors.white,
      fontWeight: 'bold',
    },
  });

  return (
    <ImageBackground 
      source={useColorScheme() === 'light' ? 
        require('@/assets/images/background-image_minified.jpg') 
        : 
        null
      }
      resizeMode="cover" 
      style={styles.image}>
      <ScrollView style={styles.scrollview} showsVerticalScrollIndicator={false}>
        {/* TITOLO PAGINA */}
        <View style={{
          flex:1,
          width:'100%',
          height:48,
          flexDirection:'row',
          justifyContent:'center',
          alignItems:'center',
          borderWidth: 0,
          pointerEvents: 'box-none',
        }}>
          <Text style={styles.sectionTitle}>{holydaysLabels[0]}</Text>
        </View>

        {/* DROPDOWN PAESI */}
        <Text style={styles.listTitle}>{holydaysLabels[2]}</Text>
        <DropdownCountry 
          selectedValue={myCountry}
          onChange={async (value: string) => {
            setMyCountry(value);
            await saveData(value, 'myCountry');
          }}
        />

        {/* GIORNI SPECIALI */}
        <View>
          <Text style={styles.listTitle}>{holydaysLabels[4]}</Text>
        </View>
        <View style={styles.groupContainer}>
          {personalHolydays.length > 0 ? (
            personalHolydays.map((item, index) => (
              <View key={index} style={styles.listItem}>
                <Text style={styles.listItemText}>{item.description}</Text>
                <TouchableOpacity onPress={() => handleDeleteSingleDate(index)} style={styles.deleteButton}>
                  <IconSymbol size={20} name="trash" color={colors.text} />
                </TouchableOpacity>
              </View>
            ))
          ) : (
            <Text style={styles.listItemText}>Nessun giorno speciale salvato</Text>
          )}
        </View>

        {/* PERIODI LUNGHI */}
        <View>
          <Text style={styles.listTitle}>{holydaysLabels[3]}</Text>
        </View>
        <View style={styles.groupContainer}>
          {vacationPeriods.length > 0 ? (
            vacationPeriods.map((item, index) => (
              <View key={index} style={styles.listItem}>
                <Text style={styles.listItemText}>{item.description}</Text>
                <TouchableOpacity onPress={() => handleDeletePeriod(index)} style={styles.deleteButton}>
                  <IconSymbol size={20} name="trash" color={colors.text} />
                </TouchableOpacity>
              </View>
            ))
          ) : (
            <Text style={styles.listItemText}>Nessun periodo lungo salvato</Text>
          )}
        </View>

        {/* AGGIUNGI NUOVA DATA */}
        <View style={{width: '100%', alignItems: 'center'}}>
          <TouchableOpacity onPress={() => setModalVisible(true)} style={styles.editButton}>
            <IconSymbol size={20} name="plus" color={colors.text} />
            <Text style={styles.editText}>{holydaysLabels[1]}</Text>
          </TouchableOpacity>
        </View>

        <View style={{ height: 180 }} />
      </ScrollView>
      <Suspense>
          <Modal
            animationType="slide"
            transparent={true}
            visible={modalVisible}
            onRequestClose={() => {
              setModalVisible(!modalVisible);
            }}
          >
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>

                {/* TITOLO + CLOSE BUTTON */}
                <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.closeButton}>
                  <IconSymbol size={24} name="plus" color={colors.text} />
                </TouchableOpacity>
                <Text style={styles.modalTitle}>{holydaysLabels[1]}</Text>

                {/* RADIO BUTTONS */}
                <View style={styles.radioButtons}>
                  <TouchableOpacity style={styles.radioButton} onPress={() => setSelectedRadioOption('single')}>
                    <View style={styles.radioCircle}>
                      {selectedRadioOption === 'single' && <View style={styles.selectedRadioCircle} />}
                    </View>
                    <Text style={styles.radioText}>{holydaysLabels[5]}</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.radioButton} onPress={() => setSelectedRadioOption('period')}>
                    <View style={styles.radioCircle}>
                      {selectedRadioOption === 'period' && <View style={styles.selectedRadioCircle} />}
                    </View>
                    <Text style={styles.radioText}>{holydaysLabels[6]}</Text>
                  </TouchableOpacity>
                </View>

                {/* DATE PICKERS */}
                {selectedRadioOption === 'single' ?
                  <DateTimePicker
                    mode="single"
                    date={selectedSingleDate}
                    onChange={(params) => setSelectedSingleDate(params.date)}
                    headerContainerStyle={{backgroundColor:colors.cardBackground}}
                    weekDaysContainerStyle={{backgroundColor:colors.cardBackground}}
                    calendarTextStyle={{color:colors.text}}
                    headerTextStyle={{color:colors.text}}
                    selectedItemColor={colors.active}
                    selectedTextStyle={{color:colors.white}}
                    todayContainerStyle={{borderColor:colors.active}}
                    todayTextStyle={{color:colors.active}}
                    monthContainerStyle={{backgroundColor:colors.cardBackground}}
                    yearContainerStyle={{backgroundColor:colors.cardBackground}}
                    headerButtonColor={colors.text}
                    weekdaysTextStyle={{color:colors.disabled}}
                    locale='it'
                    headerTextStyle={{
                      color: colors.text, 
                      fontSize: 14, fontWeight:600, textTransform:'capitalize'
                    }}
                    weekDaysTextStyle={{fontSize: 12, fontWeight:400, color:colors.disabled}}
                    dayTextStyle={{color:colors.text}}
                    style={{
                      backgroundColor:colors.cardBackground, 
                      borderRadius:16, 
                      width:'100%',
                      marginVertical:12
                    }}
                    
                  />
                  :
                  <View style={{width:'100%'}}>
                    <Text style={styles.modalTitle}>{holydaysLabels[12]}</Text>
                    <DateTimePicker
                      mode="single"
                      date={selectedPeriodStart}
                      onChange={(params) => setSelectedPeriodStart(params.date)}
                      headerContainerStyle={{backgroundColor:colors.cardBackground}}
                      weekDaysContainerStyle={{backgroundColor:colors.cardBackground}}
                      calendarTextStyle={{color:colors.text}}
                      headerTextStyle={{color:colors.text}}
                      selectedItemColor={colors.active}
                      selectedTextStyle={{color:colors.white}}
                      todayContainerStyle={{borderColor:colors.active}}
                      todayTextStyle={{color:colors.active}}
                      monthContainerStyle={{backgroundColor:colors.cardBackground}}
                      yearContainerStyle={{backgroundColor:colors.cardBackground}}
                      headerButtonColor={colors.text}
                      weekdaysTextStyle={{color:colors.disabled}}
                      locale='it'
                      style={{
                        backgroundColor:colors.cardBackground, 
                        borderRadius:16, 
                        width:'100%',
                        marginVertical:12
                      }}
                      headerTextStyle={{fontSize: 14, fontWeight:600, textTransform:'capitalize'}}
                      weekDaysTextStyle={{fontSize: 12, fontWeight:400, color:colors.disabled}}
                      dayTextStyle={{color:colors.text}}
                    />
                    <Text style={[styles.modalTitle, {marginTop:24}]}>{holydaysLabels[13]}</Text>
                    <DateTimePicker
                      mode="single"
                      date={selectedPeriodEnd}
                      onChange={(params) => setSelectedPeriodEnd(params.date)}
                      headerContainerStyle={{backgroundColor:colors.cardBackground}}
                      weekDaysContainerStyle={{backgroundColor:colors.cardBackground}}
                      calendarTextStyle={{color:colors.text}}
                      headerTextStyle={{color:colors.text}}
                      selectedItemColor={colors.active}
                      selectedTextStyle={{color:colors.white}}
                      todayContainerStyle={{borderColor:colors.active}}
                      todayTextStyle={{color:colors.active}}
                      monthContainerStyle={{backgroundColor:colors.cardBackground}}
                      yearContainerStyle={{backgroundColor:colors.cardBackground}}
                      headerButtonColor={colors.text}
                      weekdaysTextStyle={{color:colors.disabled}}
                      locale='it'
                      style={{
                        backgroundColor:colors.cardBackground, 
                        borderRadius:16, 
                        width:'100%',
                        marginVertical:12
                      }}
                      headerTextStyle={{fontSize: 14, fontWeight:600, textTransform:'capitalize'}}
                      weekDaysTextStyle={{fontSize: 12, fontWeight:400, color:colors.disabled}}
                      dayTextStyle={{color:colors.text}}
                    />
                }
                </View>
        
                {/* DESCRIZIONE */}
                <TextInput
                  style={[styles.modalInput, {marginTop:24}]}
                  placeholder={holydaysLabels[14]}
                  placeholderTextColor={colors.black}
                  value={selectedRadioOption === 'single' ? singleDateDescription : periodDescription}
                  onChangeText={selectedRadioOption === 'single' ? setSingleDateDescription : setPeriodDescription}
                />

                {/* PULSANTI ANNULLA-SALVA */}
                <View style={styles.modalButtons}>
                  <TouchableOpacity 
                    style={styles.cancelButton} 
                    onPress={ () => {
                      selectedRadioOption === 'single' ? resetSingleDateForm() : resetPeriodForm();
                    }}
                  >
                    <Text style={styles.cancelButtonText}>Annulla</Text>
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={styles.addButton} 
                    onPress={ () => {
                      selectedRadioOption === 'single' ? handleAddSingleDate() : handleAddPeriod();
                      }}
                  >
                    <Text style={styles.addButtonText}>Salva</Text>
                  </TouchableOpacity>
                </View>
              </View>
        </View>
          </Modal>
      </Suspense>
    </ImageBackground>
  );
}
